install.packages("~/Downloads/rstudio-xenial-1.1.383-amd64.deb", repos = NULL)
install.packages("rankprod")
C:\cygwin\bin\curl.exe -O http://zin2/BBS/2.14/bioc/src/contrib/RankProd_2.36.0.tar.gz && E:\biocbld\bbs-2.14-bioc\R\bin\R.exe CMD INSTALL --merge-multiarch RankProd_2.36.0.tar.gz && rm RankProd_2.36.0.tar.gz
source("https://bioconductor.org/biocLite.R")
biocLite("rankprod")
biocLite("RankProd")
biocLite("gmp")
library(gmp)
biocLite("Rmpfr")
library(Rmpfr)
biocLite("RankProd")
library(RankProd)
library(RankProd)
biocLite("oligo")
library(downloader)
installed.packages(downloader)
library("BiocInstaller", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.4")
installed.packages("downloader")
biocLite("downloader")
library(downloader)
url <- "https://raw.githubusercontent.com/genomicsclass/dagdata/master/inst/extdata/femaleControlsPopulation.csv"
filename <- basename(url)
download(url, destfile=filename)
x <- unlist( read.csv(filename) )
mean(x)
set.seed(1)
y <- sample(x,5)
abs(mean(y)-mean(x))
set.seed(5)
y <- sample(x,5)
abs(mean(y)-mean(x))
rnorm(5)
rnorm(5)
rnorm(5)
rnorm(5)
set.seed(5)
rnorm(5)
set.seed(5)
rnorm(5)
rm(list=ls())
library(downloader)
url <- "https://raw.githubusercontent.com/genomicsclass/dagdata/master/inst/extdata/femaleControlsPopulation.csv"
filename <- basename(url)
download(url, destfile=filename)
x <- unlist( read.csv(filename) )
n <- 1000
set.seed(1)
n <- 1000
for (i in 1:n) {
y <- sample(x,5)
mean_y[i] <- mean(y)
}
mean_y <- vector("numeric", n)
for (i in 1:n) {
y <- sample(x,5)
mean_y[i] <- mean(y)
}
sum(abs(mean_y)>1)/n
sum(mean_y>1)/n
set.seed(1)
n <- 1000
mean_y <- vector("numeric", n)
for (i in 1:n) {
y <- sample(x,5)
mean_y[i] <- mean(y)
}
sum(mean_y>1)/n
n <- 1000
mean_y <- vector("numeric", n)
for (i in 1:n) {
y <- sample(x,5)
mean_y[i] <- mean(y)
}
sum(mean_y>1)/n
for (i in 1:n) {
set.seed(1)
y <- sample(x,5)
mean_y[i] <- mean(y)
}
sum(mean_y>1)/n
rm(list=ls())
library(downloader)
url <- "https://raw.githubusercontent.com/genomicsclass/dagdata/master/inst/extdata/femaleControlsPopulation.csv"
filename <- basename(url)
download(url, destfile=filename)
x <- unlist( read.csv(filename) )
n <- 1000
mean_y <- vector("numeric", n)
for (i in 1:n) {
y <- sample(x,5)
mean_y[i] <- mean(y)
}
sum(mean_y>1)/n
for (i in 1:n) {
y <- sample(x,5)
mean_y[i] <- mean(y[i])
}
sum(mean_y>1)/n
for (i in 1:n) {
y <- sample(x,5)
mean_y <- mean(y[i])
}
sum(mean_y>1)/n
mean_y <- vector("numeric", n)
for (i in 1:n) {
y <- sample(x,5)
mean_y[i] <- mean(y)
}
sum(abs(mean_y)>1)/n
mean(abs(mean_y)>1)
rm(list=ls())
library(downloader)
url <- "https://raw.githubusercontent.com/genomicsclass/dagdata/master/inst/extdata/femaleControlsPopulation.csv"
filename <- basename(url)
download(url, destfile=filename)
x <- unlist( read.csv(filename) )
set.seed(1)
n <- 1000
mean_y <- vector("numeric", n)
for (i in 1:n) {
y <- sample(x,5)
mean_y[i] <- mean(y)
}
mean(abs(mean_y)>1)
mean_y <- vector("numeric", n)
for (i in 1:n) {
y <- sample(x,5)
mean_y <- mean(y)
}
for (i in 1:n) {
y <- sample(x,5)
mean_y[i] <- mean(y)
}
mean(abs(mean_y)-mean(x)> 1)
mean((abs(mean_y)-mean(x))> 1)
mean((mean_y-mean(x))> 1)
set.seed(1)
n <- 1000
mean_y <- vector("numeric", n)
for (i in 1:n) {
y <- sample(x,5)
mean_y[i] <- mean(y)
}
mean((mean_y-mean(x))> 1)
set.seed(1)
n <- 1000
mean_y <- vector("numeric", n)
for (i in 1:n) {
y <- sample(x,5)
mean_y[i] <- mean(y)
}
mean((mean_y-mean(x))> 1)
mean(abs(mean_y-mean(x))> 1)
hist(mean_y)
mean(x)
set.seed(1)
n <- 10000
mean_y <- vector("numeric", n)
for (i in 1:n) {
y <- sample(x,5)
mean_y[i] <- mean(y)
}
mean(abs(mean_y-mean(x))> 1)
set.seed(1)
n <- 10000
mean_y <- vector("numeric", n)
for (i in 1:n) {
y <- sample(x,5)
mean_y[i] <- mean(y)
}
mean(abs(mean_y-mean(x))> 1)
set.seed(1)
n <- 1000
mean_y <- vector("numeric", n)
for (i in 1:n) {
y <- sample(x,50)
mean_y[i] <- mean(y)
}
mean(abs(mean_y-mean(x))> 1)
install.packages("~/Downloads/biomaRt_2.34.2.tgz", repos = NULL, type = .Platform$pkgType)
library(biomaRt)
install.packages("XML")
library("BiocInstaller", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.4")
biocLite("XML")
library(XML)
installed.packages("XML")
install.packages("~/Downloads/XML_3.98-1.10.tgz", repos = NULL, type = .Platform$pkgType)
library(XML)
install.packages("XML")
library(XML)
biocLite("XML")
library(XML)
library(XML)
library(biomaRt)
library("biomaRt", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.4")
library(biomaRt)
ensembl_hs <- useMart("ensembl", dataset = "hsapiens_gene_ensembl")
library(biomaRt)
̣?wilcox.test()
̣?wilcox.tes
̣?wilcox.test
̣?wilcox.test
?wilcox.test
?anova
? pairwise.t.test
?Greenhouse-Geisser correction
?Greenhouse-Geisser
?friedman.test
?kruskal.test
kruskal.test(Tab_bio$MDRD~Tab_bio$RS_1800997)
shiny::runApp('Área de Trabalho/HK Transcript')
shiny::runApp('Área de Trabalho/HK Transcript')
#library(tidyverse)
#library(plotly)
#library(shinysky)
#library(R2HTML)
#library(DBI)
library(dplyr)
install.packages("dplyr")
library(BiocInstaller)
biocLite("dplyr")
install.packages("~/Downloads/dplyr_0.7.2.tar.gz", repos = NULL, type = "source")
#library(tidyverse)
#library(plotly)
#library(shinysky)
#library(R2HTML)
#library(DBI)
library(dplyr)
runApp('Área de Trabalho/HK Transcript')
biocLite("shinysky")
runApp('Área de Trabalho/HK Transcript')
installed.packages("shinysky")
devtools::install_github("AnalytixWare/ShinySky")
library(devtools)
biocLite(devtools)
biocLite("devtools")
devtools::install_github("AnalytixWare/ShinySky")
runApp('Área de Trabalho/HK Transcript')
runApp('Área de Trabalho/HK Transcript')
runApp('Área de Trabalho/HK Transcript')
runApp('Área de Trabalho/HK Transcript')
biocLite("plotly")
runApp('Área de Trabalho/HK Transcript')
runApp('Área de Trabalho/HK Transcript')
biocLite("mime")
runApp('Área de Trabalho/HK Transcript')
load("/home/ubuntupc/Área de Trabalho/analise_HKG/Mouse/Heart_bulk_Tissue.RData")
rm(expression_Heart_bulk_Tissue)
load("/home/ubuntupc/Área de Trabalho/analise_HKG/tissue_types/mouse_sample/RPKM/Control/Housekeeping/DesignerPrimer_mouse/Heart_bulk_Tissue.RData")
View(dPrimer_mouse)
load("/home/ubuntupc/Área de Trabalho/analise_HKG/tissue_types/mouse_sample/RPKM/Control/Housekeeping/DesignerPrimer_mouse/tab_echant_mouse.RData")
View(tab_echant_mouse)
View(dPrimer_mouse)
shiny::runApp('Área de Trabalho/Docker/housekeepingAtlas')
load("www/Heart_bulk_Tissue_mouse.RData")
load("www/Housekeeping_TranscriptsMouse.RData")
View(dPrimer_mouse)
rm(dPrimer_mouse)
load("www/Housekeeping_TranscriptsMouse.RData")
runApp('Área de Trabalho/Docker/housekeepingAtlas')
runApp('Área de Trabalho/Docker/housekeepingAtlas')
View(mousePrimer)
load("www/Heart_bulk_Tissue.RData")
load("/home/ubuntupc/Área de Trabalho/Docker/housekeepingAtlas/www/Heart_bulk_Tissue.RData")
View(dPrimer_mouse)
mousePrimer = dPrimer_mouse
dPrimer_mouse = unique(merge(hk[,c(2,1)], mousePrimer, all.x = T, by = "Transcript_ID"))
View(dPrimer_mouse)
rm(list = ls())
runApp('Área de Trabalho/Docker/housekeepingAtlas')
rm(list = ls())
tpm_log_from_rpkm <- function(x) {
rpkm.sum <- colSums(x)
return(t(t(x) / (1e-06 * rpkm.sum)))
}
library(dplyr)
load("/home/ubuntupc/Área de Trabalho/analise_HKG/tissue_types/connective_tissue/New_Analysis/GTEx/sampleInfo_modified.RData")
i=1
getwd()
log2(mean(2,3,4,5,6,7,8,9))
mean(2,3,4,5,6,7,8,9)
log2(mean(c(2,3,4,5,6,7,8,9)))
mean(c(2,3,4,5,6,7,8,9))
log2(5.5)
mean(c(log2(2),log2(3),log2(4),log2(5),log2(6),log2(7),log2(8),log2(9)))
2**mean(c(log2(2),log2(3),log2(4),log2(5),log2(6),log2(7),log2(8),log2(9)))
2**log2(2)
log2(2)
log2(1)
log2(3)
load("/home/ubuntupc/Área de Trabalho/analise_HKG/tissue_types/connective_tissue/New_Analysis/ARCHS4_GTEX/A549criterio.RData")
View(TissueResultMerged)
load("/home/ubuntupc/Área de Trabalho/analise_HKG/tissue_types/connective_tissue/New_Analysis/GTEx/Adipose_Subcutaneous_expr_Housekeeping.RData")
View(Adipose_Subcutaneous_expr_Housekeeping)
setwd("~/Repository/Housekeeping and Reference Transcript Atlas/HRT_Atlas")
load("/home/ubuntupc/Repository/Housekeeping and Reference Transcript Atlas/HRT_Atlas/www/EpiRegio_Gene.RData")
geneName2 = geneName
for (i in 451:900) {
data = data.frame(fromJSON(paste0("https://epiregio.de/REST_API/GeneQuery/",as.character(geneName[i,2]),"/")))
if (nrow(data)>0) {
geneName2[i,3] = "Yes"
}
save(geneName2, file = "../EpiRegio_Gene2.RData")
save(data, file = paste0("../Epiregio/",geneName2[i,1], ".RData"))
cat("processed", i, "\n")
}
library(jsonlite)
for (i in 451:900) {
data = data.frame(fromJSON(paste0("https://epiregio.de/REST_API/GeneQuery/",as.character(geneName[i,2]),"/")))
if (nrow(data)>0) {
geneName2[i,3] = "Yes"
}
save(geneName2, file = "../EpiRegio_Gene2.RData")
save(data, file = paste0("../Epiregio/",geneName2[i,1], ".RData"))
cat("processed", i, "\n")
}
save(data, file = paste0("../HRT_Atlas/Epiregio/",geneName2[i,1], ".RData"))
cat("processed", i, "\n")
for (i in 452:900) {
data = data.frame(fromJSON(paste0("https://epiregio.de/REST_API/GeneQuery/",as.character(geneName[i,2]),"/")))
if (nrow(data)>0) {
geneName2[i,3] = "Yes"
}
save(geneName2, file = "../EpiRegio_Gene2.RData")
save(data, file = paste0("../HRT_Atlas/Epiregio/",geneName2[i,1], ".RData"))
cat("processed", i, "\n")
}
data = data.frame(fromJSON(paste0("https://epiregio.de/REST_API/GeneQuery/",as.character(geneName[i,2]),"/")))
if (nrow(data)>0) {
geneName2[i,3] = "Yes"
}
save(geneName2, file = "../EpiRegio_Gene2.RData")
data = data.frame(fromJSON(paste0("https://epiregio.de/REST_API/GeneQuery/",as.character(geneName[i,2]),"/")))
if (nrow(data)>0) {
geneName2[i,3] = "Yes"
}
save(geneName2, file = "../EpiRegio_Gene2.RData")
for (i in 890:900) {
data = data.frame(fromJSON(paste0("https://epiregio.de/REST_API/GeneQuery/",as.character(geneName[i,2]),"/")))
if (nrow(data)>0) {
geneName2[i,3] = "Yes"
}
save(geneName2, file = "../EpiRegio_Gene2.RData")
save(data, file = paste0("../HRT_Atlas/Epiregio/",geneName2[i,1], ".RData"))
cat("processed", i, "\n")
}
shiny::runApp()
gsub("^[A-z0-9_]+[:(:], "", "ACTR1A (ENSG00000138107)")
gsub("^[A-z0-9_][:(:], "", "ACTR1A (ENSG00000138107)")
gsub("[:(:], "", "ACTR1A (ENSG00000138107)")
gsub("$[A-z0-9_][:(:], "", "ACTR1A (ENSG00000138107)")
gsub("[A-z0-9_][:(:], "", "ACTR1A (ENSG00000138107)")
gsub("[A-z0-9_], "", "ACTR1A (ENSG00000138107)")
gsub("[A-z0-9], "", "ACTR1A (ENSG00000138107)")
gsub("^[A-z0-9_]+[:(:]", "", "ACTR1A (ENSG00000138107)")
gsub("[:(:]+[A-z0-9_]", "", "ACTR1A (ENSG00000138107)")
gsub("[:(:]+[A-z0-9_]*", "", "ACTR1A (ENSG00000138107)")
gsub(" [:(:]+[A-z0-9_]*[:):]", "", "ACTR1A (ENSG00000138107)")
gsub(" [:(:][A-z0-9_]*[:):]", "", "ACTR1A (ENSG00000138107)")
gsub("[:(:][A-z0-9_]*[:):]", "", "ACTR1A (ENSG00000138107)")
runApp()
rm(list = ls())
runApp()
rm(list = ls())
rm(list = ls())
runApp()
rm(list = ls())
runApp()
rm(list = ls())
runApp()
runApp()
runApp()
runApp()
rm(list = ls())
runApp()
