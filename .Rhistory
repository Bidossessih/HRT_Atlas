shiny::runApp()
library(DBI)
library(RSQLite)
library(dplyr)
library(dbplyr)
dbListTables(con)
#con <- dbConnect(RSQLite::SQLite(), "/home/bidossessi/Desktop/Ubuntu/RefTranscriptDb/Housekeeping_genes_Repository/Code_data_HK_Gtex/GTEX_RawData.sqlite")
#Show tables
dbListTables(con)
runApp()
#con <- dbConnect(RSQLite::SQLite(), "/home/bidossessi/Desktop/Ubuntu/RefTranscriptDb/Housekeeping_genes_Repository/Code_data_HK_Gtex/GTEX_RawData.sqlite")
#Show tables
dbListTables(con)
data <- data.frame(tbl(con, "tab_echant"))
View(data)
load("/home/ubuntupc/Área de Trabalho/analise_HKG/tissue_types/connective_tissue/New_Analysis/New_11_06_2020/SampleInfo.RData")
View(sampleInfo)
View(tab_echant)
rm(list=ls())
load("/home/ubuntupc/Área de Trabalho/analise_HKG/tissue_types/connective_tissue/New_Analysis/RPKM/GranulocyteRPKM.RData")
View(RPKMS_log)
nrow(RPKMS_log)
load("/home/ubuntupc/Área de Trabalho/analise_HKG/tissue_types/connective_tissue/New_Analysis/ARCHS4_GTEX/Compl_analise/NonPseudo/Granulocyte.RData")
View(Ref)
load("/home/ubuntupc/Área de Trabalho/analise_HKG/tissue_types/connective_tissue/New_Analysis/ARCHS4_GTEX/Granulocytecriterio.RData")
View(TissueResultMerged)
load("/home/ubuntupc/Área de Trabalho/analise_HKG/Complementary/RPKM2/Granulocyte.RData")
View(RPKMS_log)
View(RPKMS_log)
load("/home/ubuntupc/Área de Trabalho/analise_HKG/tissue_types/connective_tissue/New_Analysis/RPKM/GranulocyteRPKM.RData")
View(RPKMS_log)
load("/home/ubuntupc/Área de Trabalho/analise_HKG/tissue_types/connective_tissue/New_Analysis/RPKM/GranulocyteRPKM.RData")
View(RPKMS_log)
dim(RPKMS_log)
load("/home/ubuntupc/Área de Trabalho/analise_HKG/Complementary/RPKM2/Granulocyte.RData")
View(RPKMS_log)
dim(RPKMS_log)
load("/home/ubuntupc/Área de Trabalho/analise_HKG/tissue_types/connective_tissue/Granulocyte.RData")
View(expression_Granulocyte)
dim(expression_Granulocyte)
load("External/Data/tab_echant.RData")
View(tab_echant)
load("/home/ubuntupc/Área de Trabalho/analise_HKG/tissue_types/connective_tissue/New_Analysis/RPKM/A549RPKM.RData")
dim(RPKMS_log)
load("/home/ubuntupc/Área de Trabalho/analise_HKG/tissue_types/connective_tissue/New_Analysis/RPKM/AlveolarRPKM.RData")
dim(RPKMS_log)
load("/home/ubuntupc/Área de Trabalho/analise_HKG/tissue_types/connective_tissue/New_Analysis/ARCHS4_GTEX/Compl_analise/NonPseudo/Bladder_cancer_cell_line.RData")
dim(RPKMS_log)
View(RPKMS_log)
View(Ref)
load("/home/ubuntupc/Área de Trabalho/analise_HKG/tissue_types/connective_tissue/New_Analysis/ARCHS4_GTEX/Compl_analise/DesignedPrimer_Compl/Caco2.RData")
rm(list=(ls))
rm(list=ls())
load("/home/ubuntupc/Área de Trabalho/analise_HKG/tissue_types/connective_tissue/New_Analysis/RPKM/ChondrocyteRPKM.RData")
dim(RPKMS_log)
shiny::runApp()
runApp()
load("/home/ubuntupc/Repository/Housekeeping and Reference Transcript Atlas/HRT_Atlas/www/EpiRegio_Gene.RData")
View(geneName)
library(jsonlite)
View(geneName)
i=1
dataEssai = data.frame(fromJSON(paste0("https://epiregio.de/REST_API/GeneQuery/",as.character(geneName[i,2]),"/")))
View(dataEssai)
rm(dataEssai)
data = data.frame(fromJSON(paste0("https://epiregio.de/REST_API/GeneQuery/",as.character(geneName[i,2]),"/")))
dataEpi1 = data[,3:12]
View(dataEpi1)
dataEpi1$regressionCoefficient > 0
dataEpi1$'Predicted Function' = ifelse(dataEpi1$regressionCoefficient > 0, "Activator", "Repressor")
for (i in 1:nrow(dataEpi1)) {
dataEpi1$CREMID[i] = ifelse(dataEpi1$CREMID[i]=="No CREM", "No CREM", paste0("https://epiregio.de/cluster/",dataEpi1$CREMID[i]))
}
library(dplyr)
dataEpi1 = arrange(dataEpi1, desc(normModelScore))[,c(1,11,3,4,9,10)]
colnames(dataEpi1)= c("REM ID", "Predicted Function", "REM Start", "REM End", "CREM ID", "Model Score")
View(data)
dataEpi2 = data[,c(4,7,59:104)]
data[,c(4,7,59:104)]
dataEpi2 = data[,59:104]
View(data)
dim(data)
dataEpi2 = data[,12:14]
View(dataEpi2)
dataEpi2 = data[,12:20]
dataEpi2 = data[,12:15]
datajson = fromJSON(paste0("https://epiregio.de/REST_API/GeneQuery/",as.character(geneName[i,2]),"/"))
View(datajson)
View(datajson)
data = data.frame(fromJSON(paste0("https://epiregio.de/REST_API/GeneQuery/",as.character(geneName[i,2]),"/")),flatten = TRUE)
data = data.frame(fromJSON(paste0("https://epiregio.de/REST_API/GeneQuery/",as.character(geneName[i,2]),"/")))
i=1
data = data.frame(fromJSON(paste0("https://epiregio.de/REST_API/GeneQuery/",as.character(geneName[i,2]),"/")),flatten = TRUE)
View(data)
data[,104]
data$cellTypeScore
data = data.frame(fromJSON(paste0("https://epiregio.de/REST_API/GeneQuery/",as.character(geneName[i,2]),"/")))
cellTypeDNase1Signal = data$cellTypeDNase1Signal
View(cellTypeDNase1Signal)
View(cellTypeDNase1Signal)
cellTypeDNase1Signal = data.frame(data[,3:7] data$cellTypeDNase1Signal)
cellTypeDNase1Signal = data.frame(data[,3:7], data$cellTypeDNase1Signal)
View(cellTypeDNase1Signal)
View(dataEpi2)
cellTypeDNase1Signal = dataEpi2 = data.frame(data[,3:7], data$cellTypeDNase1Signal)
for (i in 1:nrow(dataEpi2)) {
for (j in 6:ncol(dataEpi2)) {
dataEpi2[i,j] = paste0(x1,dataEpi2[i,j],x2)
}
}
################ Regulatory Elements cell-specific predicted function ########################
x1='<a  data-toggle="tooltip" title="Epiregio REMs interpretation.">'
x2='</a>'
for (i in 1:nrow(dataEpi2)) {
for (j in 6:ncol(dataEpi2)) {
dataEpi2[i,j] = paste0(x1,dataEpi2[i,j],x2)
}
}
View(dataEpi2)
View(datajson)
View(geneName)
gene="ABCF2"
idx = which(geneName$geneSymbol %in% gene)
shiny::runApp()
gene = "EEF2"
idx = which(geneName$geneSymbol %in% gene)
data = data.frame(fromJSON(paste0("https://epiregio.de/REST_API/GeneQuery/",as.character(geneName[idx,2]),"/")))
dataEpi1 = data[,3:12]
rm(list = ls())
runApp()
load("www/EpiRegio_Gene.RData")
rm(list = ls())
runApp()
runApp()
runApp()
shiny::runApp()
data = data.frame(fromJSON(paste0("https://epiregio.de/REST_API/GeneQuery/",as.character(geneName[i,2]),"/")))
i=8
data = data.frame(fromJSON(paste0("https://epiregio.de/REST_API/GeneQuery/",as.character(geneName[i,2]),"/")))
runApp()
runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
essai = dataep$cellTypeScore
View(essai)
essai = dataep[,3:7]
runApp()
rm(list = ls())
runApp()
rm(list = ls())
runApp()
#Show tables
dbListTables(con)
runApp()
#Show tables
dbListTables(con)
#con <- dbConnect(RSQLite::SQLite(), "~/Repository/Housekeeping and Reference Transcript Atlas/db/Housekeeping_human_mouse_HRTatlas_version.sqlite")
con <- dbConnect(RSQLite::SQLite(), "~/Repository/Housekeeping and Reference Transcript Atlas/db/LogMCF_Housekeeping_human_mouse.sqlite")
#Show tables
dbListTables(con)
#con <- dbConnect(RSQLite::SQLite(), "~/Repository/Housekeeping and Reference Transcript Atlas/db/Housekeeping_human_mouse_HRTatlas_version.sqlite")
con <- dbConnect(RSQLite::SQLite(), "~/Área de Trabalho/analise_HKG/tissue_types/connective_tissue/New_Analysis/New_11_06_2020/LogMCF_Housekeeping_human_mouse.sqlite")
#Show tables
dbListTables(con)
#con <- dbConnect(RSQLite::SQLite(), "~/Repository/Housekeeping and Reference Transcript Atlas/db/Housekeeping_human_mouse_HRTatlas_version.sqlite")
con <- dbConnect(RSQLite::SQLite(), "~/Repository/Housekeeping and Reference Transcript Atlas/db/LogMCF_Housekeeping_human_mouse.sqlite")
#Show tables
dbListTables(con)
rm(list = ls())
runApp()
table="PBMC"
data <- data.frame(tbl(con, table))# uncomment
View(data)
runApp()
