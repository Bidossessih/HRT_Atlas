if("gene" %in% names(query)){
print(query[["gene"]])
xl = query[["gene"]]
xt = xl
} else {
print("Francine")
xl = length(x)
xt="Francine"#tail(x, 1)
}
print("X_T")
print(xt)
# Can also set the label and select items
updateSelectInput(session, "inSelect",
label = paste("Select input label", xl),
choices = x,
selected = xt
)
})
}
shinyApp(ui, server)
library(shiny)
ui <- fluidPage(
p("The checkbox group controls the select input"),
checkboxGroupInput("inCheckboxGroup", "Input checkbox",
c("Item A", "Item B", "Item C")),
selectInput("inSelect", "Select input",
c("Item A", "Item B", "Item C"))
)
server <- function(input, output, session) {
observe({
x <- input$inCheckboxGroup
# Can use character(0) to remove all choices
if (is.null(x))
x <- character(0)
query = isolate(getQueryString())
if (is.null(query[["gene"]]) | is.na(query[["gene"]]))
xt <- "No gene"
if("gene" %in% names(query)){
print(query[["gene"]])
xl = query[["gene"]]
xt = xl
} else {
print("Francine")
xl = length(x)
xt="Francine"#tail(x, 1)
}
print("X_T")
print(xt)
# Can also set the label and select items
updateSelectInput(session, "inSelect",
label = paste("Select input label", xl),
choices = x,
selected = xt
)
})
}
shinyApp(ui, server)
library(shiny)
ui <- fluidPage(
p("The checkbox group controls the select input"),
checkboxGroupInput("inCheckboxGroup", "Input checkbox",
c("Item A", "Item B", "Item C")),
selectInput("inSelect", "Select input",
c("Item A", "Item B", "Item C"))
)
server <- function(input, output, session) {
observe({
x <- input$inCheckboxGroup
# Can use character(0) to remove all choices
if (is.null(x))
x <- character(0)
query = isolate(getQueryString())
if (is.null(query[["gene"]]) | is.na(query[["gene"]]))
xt <- "No gene"
if("gene" %in% names(query)){
print(query[["gene"]])
xl = query[["gene"]]
xt = xl
} else {
print("Francine")
xl = length(x)
xt=tail(x, 1)
}
print("X_T")
print(xt)
# Can also set the label and select items
updateSelectInput(session, "inSelect",
label = paste("Select input label", xl),
choices = x,
selected = xt
)
})
}
shinyApp(ui, server)
library(shiny)
ui <- fluidPage(
p("The checkbox group controls the select input"),
checkboxGroupInput("inCheckboxGroup", "Input checkbox",
c("Item A", "Item B", "Item C")),
selectInput("inSelect", "Select input",
c("Item A", "Item B", "Item C"))
)
server <- function(input, output, session) {
observe({
x <- input$inCheckboxGroup
# Can use character(0) to remove all choices
if (is.null(x))
x <- character(0)
query = isolate(getQueryString())
sel_g = NULL
makeReactiveBinding("sel_g")
sel_g = query[["gene"]]
if (is.null(sel_g) | is.na(sel_g))
xt <- "No gene"
if("gene" %in% names(query)){
print(query[["gene"]])
xl = sel_g
xt = sel_g
} else {
print("Francine")
xl = length(x)
xt=tail(x, 1)
}
print("X_T")
print(xt)
# Can also set the label and select items
updateSelectInput(session, "inSelect",
label = paste("Select input label", xl),
choices = x,
selected = xt
)
})
}
shinyApp(ui, server)
library(shiny)
ui <- fluidPage(
p("The checkbox group controls the select input"),
checkboxGroupInput("inCheckboxGroup", "Input checkbox",
c("Item A", "Item B", "Item C")),
selectInput("inSelect", "Select input",
c("Item A", "Item B", "Item C"))
)
server <- function(input, output, session) {
observe({
x <- input$inCheckboxGroup
# Can use character(0) to remove all choices
if (is.null(x) | is.na(x))
x <- character(0)
query = isolate(getQueryString())
sel_g = NULL
makeReactiveBinding("sel_g")
sel_g = query[["gene"]]
if (is.null(sel_g) | is.na(sel_g))
xt <- "No gene"
if("gene" %in% names(query)){
print(query[["gene"]])
xl = sel_g
xt = sel_g
} else {
print("Francine")
xl = length(x)
xt=tail(x, 1)
}
print("X_T")
print(xt)
# Can also set the label and select items
updateSelectInput(session, "inSelect",
label = paste("Select input label", xl),
choices = x,
selected = xt
)
})
}
shinyApp(ui, server)
library(shiny)
ui <- fluidPage(
p("The checkbox group controls the select input"),
checkboxGroupInput("inCheckboxGroup", "Input checkbox",
c("Item A", "Item B", "Item C")),
selectInput("inSelect", "Select input",
c("Item A", "Item B", "Item C"))
)
server <- function(input, output, session) {
observe({
x <- input$inCheckboxGroup
# Can use character(0) to remove all choices
if (is.null(x))
x <- character(0)
query = isolate(getQueryString())
if (is.null(query[["gene"]]) | is.na(query[["gene"]]))
xt <- "No gene"
if("gene" %in% names(query)){
print(query[["gene"]])
xl = query[["gene"]]
xt = xl
} else {
print("Francine")
xl = length(x)
xt=tail(x, 1)
}
print("X_T")
print(xt)
# Can also set the label and select items
updateSelectInput(session, "inSelect",
label = paste("Select input label", xl),
choices = x,
selected = xt
)
})
}
shinyApp(ui, server)
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Comment this if you don't want the app to be served on a random port
#options(shiny.port = httpuv::randomPort())
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application # To be redefined before deployment
opt = list(
host = "0.0.0.0",
port = 1985
)
run_app(options = opt)
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Comment this if you don't want the app to be served on a random port
#options(shiny.port = httpuv::randomPort())
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application # To be redefined before deployment
opt = list(
host = "0.0.0.0",
port = 1985
)
run_app(options = opt)
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Comment this if you don't want the app to be served on a random port
#options(shiny.port = httpuv::randomPort())
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application # To be redefined before deployment
opt = list(
host = "0.0.0.0",
port = 1985
)
run_app(options = opt)
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Comment this if you don't want the app to be served on a random port
#options(shiny.port = httpuv::randomPort())
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application # To be redefined before deployment
opt = list(
host = "0.0.0.0",
port = 1985
)
run_app(options = opt)
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Comment this if you don't want the app to be served on a random port
#options(shiny.port = httpuv::randomPort())
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application # To be redefined before deployment
opt = list(
host = "0.0.0.0",
port = 1985
)
run_app(options = opt)
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Comment this if you don't want the app to be served on a random port
#options(shiny.port = httpuv::randomPort())
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application # To be redefined before deployment
opt = list(
host = "0.0.0.0",
port = 1985
)
run_app(options = opt)
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Comment this if you don't want the app to be served on a random port
#options(shiny.port = httpuv::randomPort())
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application # To be redefined before deployment
opt = list(
host = "0.0.0.0",
port = 1985
)
run_app(options = opt)
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Comment this if you don't want the app to be served on a random port
#options(shiny.port = httpuv::randomPort())
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application # To be redefined before deployment
opt = list(
host = "0.0.0.0",
port = 1985
)
run_app(options = opt)
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Comment this if you don't want the app to be served on a random port
#options(shiny.port = httpuv::randomPort())
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application # To be redefined before deployment
opt = list(
host = "0.0.0.0",
port = 1985
)
run_app(options = opt)
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Comment this if you don't want the app to be served on a random port
#options(shiny.port = httpuv::randomPort())
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application # To be redefined before deployment
opt = list(
host = "0.0.0.0",
port = 1985
)
run_app(options = opt)
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Comment this if you don't want the app to be served on a random port
#options(shiny.port = httpuv::randomPort())
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application # To be redefined before deployment
opt = list(
host = "0.0.0.0",
port = 1985
)
run_app(options = opt)
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Comment this if you don't want the app to be served on a random port
#options(shiny.port = httpuv::randomPort())
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application # To be redefined before deployment
opt = list(
host = "0.0.0.0",
port = 1985
)
run_app(options = opt)
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Comment this if you don't want the app to be served on a random port
#options(shiny.port = httpuv::randomPort())
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application # To be redefined before deployment
opt = list(
host = "0.0.0.0",
port = 1985
)
run_app(options = opt)
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Comment this if you don't want the app to be served on a random port
#options(shiny.port = httpuv::randomPort())
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application # To be redefined before deployment
opt = list(
host = "0.0.0.0",
port = 1985
)
run_app(options = opt)
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Comment this if you don't want the app to be served on a random port
#options(shiny.port = httpuv::randomPort())
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application # To be redefined before deployment
opt = list(
host = "0.0.0.0",
port = 1985
)
run_app(options = opt)
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Comment this if you don't want the app to be served on a random port
#options(shiny.port = httpuv::randomPort())
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application # To be redefined before deployment
opt = list(
host = "0.0.0.0",
port = 1985
)
run_app(options = opt)
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Comment this if you don't want the app to be served on a random port
#options(shiny.port = httpuv::randomPort())
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application # To be redefined before deployment
opt = list(
host = "0.0.0.0",
port = 1985
)
run_app(options = opt)
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Comment this if you don't want the app to be served on a random port
#options(shiny.port = httpuv::randomPort())
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application # To be redefined before deployment
opt = list(
host = "0.0.0.0",
port = 1985
)
run_app(options = opt)
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Comment this if you don't want the app to be served on a random port
#options(shiny.port = httpuv::randomPort())
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application # To be redefined before deployment
opt = list(
host = "0.0.0.0",
port = 1985
)
run_app(options = opt)
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Comment this if you don't want the app to be served on a random port
#options(shiny.port = httpuv::randomPort())
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application # To be redefined before deployment
opt = list(
host = "0.0.0.0",
port = 1985
)
run_app(options = opt)
getwd()
