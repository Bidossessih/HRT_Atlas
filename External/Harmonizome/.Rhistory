}
shinyApp(ui = ui, server = server)
server <- function(input, output) {
tdata <- as.data.frame(Titanic)
tdata <- cbind(tdata,tdata)
output$titanic <- DT::renderDataTable({
header <-  htmltools::withTags(table(
class = 'display',
thead(
tr(
th(rowspan = 1, 'PassengerID'),
th(colspan = 6, 'Titanic1'),
th(colspan = 6, 'Titanic2')),
tr(lapply(c(" ", rep(colnames(as.data.frame(Titanic)), 2)), th))
)
)
)
colnames(tdata)[1] <- as.character(popify(actionLink(inputId=paste("t_",1,sep=""), label=colnames(tdata)[1]), title=paste("message1"), placement = "bottom", trigger = "hover", options = NULL))
rownames(tdata)[2] <- as.character(popify(actionLink(inputId=paste("t_",2,sep=""), label=rownames(tdata)[2]), title=paste("message2"), placement = "bottom", trigger = "hover", options = NULL))
rownames(tdata)[3] <- as.character(popify(actionLink(inputId=paste("t_",3,sep=""), label=rownames(tdata)[3]), title=paste("message3"), placement = "bottom", trigger = "hover", options = NULL))
datatable(tdata, rownames=TRUE, selection='none', escape=FALSE)
})
}
shinyApp(ui = ui, server = server)
server <- function(input, output) {
tdata <- as.data.frame(Titanic)
tdata <- cbind(tdata,tdata)
output$titanic <- DT::renderDataTable({
header <-  htmltools::withTags(table(
class = 'display',
thead(
tr(
th(rowspan = 1, 'PassengerID'),
th(colspan = 6, 'Titanic1'),
th(colspan = 6, 'Titanic2')),
tr(lapply(c(" ", rep(colnames(as.data.frame(Titanic)), 2)), th))
)
)
)
colnames(tdata)[1] <- as.character(popify(actionLink(inputId="t_1", label=colnames(tdata)[1]), title=paste("message1"), placement = "bottom", trigger = "hover", options = NULL))
rownames(tdata)[2] <- as.character(popify(actionLink(inputId=paste("t_",2,sep=""), label=rownames(tdata)[2]), title=paste("message2"), placement = "bottom", trigger = "hover", options = NULL))
rownames(tdata)[3] <- as.character(popify(actionLink(inputId=paste("t_",3,sep=""), label=rownames(tdata)[3]), title=paste("message3"), placement = "bottom", trigger = "hover", options = NULL))
datatable(tdata, rownames=TRUE, selection='none', escape=FALSE)
})
}
shinyApp(ui = ui, server = server)
runApp('Desktop/Ubuntu/RefTranscriptDb/HK Transcript')
runApp('Desktop/Ubuntu/RefTranscriptDb/HK Transcript')
runApp('Desktop/Ubuntu/RefTranscriptDb/HK Transcript')
runApp('Desktop/Ubuntu/RefTranscriptDb/HK Transcript')
runApp('Desktop/Ubuntu/RefTranscriptDb/HK Transcript')
library(shinyBS)
runApp('Desktop/Ubuntu/RefTranscriptDb/HK Transcript')
runApp('Desktop/Ubuntu/RefTranscriptDb/HK Transcript')
shinyApp(ui = ui, server = server)
server <- function(input, output) {
tdata <- as.data.frame(Titanic)
tdata <- cbind(tdata,tdata)
output$titanic <- DT::renderDataTable({
header <-  htmltools::withTags(table(
class = 'display',
thead(
tr(
th(rowspan = 1, 'PassengerID'),
th(colspan = 6, 'Titanic1'),
th(colspan = 6, 'Titanic2')),
tr(lapply(c(" ", rep(colnames(as.data.frame(Titanic)), 2)), th))
)
)
)
header <-  htmltools::withTags(table(
class = 'display',
thead(
tr(
th(rowspan = 1, 'PassengerID'),
th(colspan = 6, 'Titanic1'),
th(colspan = 6, 'Titanic2')),
tr(lapply(c(" ", rep(colnames(as.data.frame(Titanic)), 2)), th))
)
)
)
#https://community.rstudio.com/t/popup-message-box-in-shiny-datatables-for-row-names/12820/4
colnames(tdata)[1] <- as.character(popify(actionLink(inputId="t_1", label=colnames(tdata)[1]), title=paste("message1"), placement = "bottom", trigger = "hover", options = NULL))
rownames(tdata)[2] <- as.character(popify(actionLink(inputId=paste("t_",2,sep=""), label=rownames(tdata)[2]), title=paste("message2"), placement = "bottom", trigger = "hover", options = NULL))
rownames(tdata)[3] <- as.character(popify(actionLink(inputId=paste("t_",3,sep=""), label=rownames(tdata)[3]), title=paste("message3"), placement = "bottom", trigger = "hover", options = NULL))
DT::datatable(tdata, container = header, rownames=TRUE, selection='none', escape=FALSE)
})
}
shinyApp(ui = ui, server = server)
server <- function(input, output) {
tdata <- as.data.frame(Titanic)
tdata <- cbind(tdata,tdata)
output$titanic <- DT::renderDataTable({
header <-  htmltools::withTags(table(
class = 'display',
thead(
tr(
th(rowspan = 1, 'PassengerID'),
th(colspan = 6, 'Titanic1'),
th(colspan = 6, 'Titanic2')),
tr(lapply(c(" ", rep(colnames(as.data.frame(Titanic)), 2)), th))
)
)
)
header <-  htmltools::withTags(table(
class = 'display',
thead(
tr(
th(rowspan = 1, 'PassengerID'),
th(colspan = 6, 'Titanic1'),
th(colspan = 6, 'Titanic2')),
tr(lapply(c(" ", rep(colnames(as.data.frame(Titanic)), 2)), th))
)
)
)
#https://community.rstudio.com/t/popup-message-box-in-shiny-datatables-for-row-names/12820/4
colnames(tdata)[1] <- as.character(popify(actionLink(inputId="t_1", label=colnames(tdata)[1]), title=paste("message1"), placement = "bottom", trigger = "hover", options = NULL))
rownames(tdata)[2] <- as.character(popify(actionLink(inputId=paste("t_",2,sep=""), label=rownames(tdata)[2]), title=paste("message2"), placement = "bottom", trigger = "hover", options = NULL))
rownames(tdata)[3] <- as.character(popify(actionLink(inputId=paste("t_",3,sep=""), label=rownames(tdata)[3]), title=paste("message3"), placement = "bottom", trigger = "hover", options = NULL))
DT::datatable(tdata, rownames=TRUE, selection='none', escape=FALSE)
})
}
shinyApp(ui = ui, server = server)
runApp('Desktop/Ubuntu/RefTranscriptDb/HK Transcript')
runApp('Desktop/Ubuntu/RefTranscriptDb/HK Transcript')
runApp('Desktop/Ubuntu/RefTranscriptDb/HK Transcript')
runApp('Desktop/Ubuntu/RefTranscriptDb/HK Transcript')
runApp('Desktop/Ubuntu/RefTranscriptDb/HK Transcript')
runApp('Desktop/Ubuntu/RefTranscriptDb/HK Transcript')
runApp('Desktop/Ubuntu/RefTranscriptDb/HK Transcript')
runApp('Desktop/Ubuntu/RefTranscriptDb/HK Transcript')
runApp('Desktop/Ubuntu/RefTranscriptDb/HK Transcript')
runApp('Desktop/Ubuntu/RefTranscriptDb/HK Transcript')
runApp('Desktop/Ubuntu/RefTranscriptDb/HK Transcript')
shinyApp(ui = ui, server = server)
runApp('Desktop/Ubuntu/RefTranscriptDb/HK Transcript')
runApp('Desktop/Ubuntu/RefTranscriptDb/HK Transcript')
library(biomaRt)
ensembl_hs <- useMart("ensembl", dataset = "hsapiens_gene_ensembl")
ensembl_hs <- useMart("ensembl", dataset = "hsapiens_gene_ensembl")
library(biomaRt)
ensembl_hs <- useMart("ensembl", dataset = "hsapiens_gene_ensembl")
View(Housekeeping_TranscriptFiltered)
Genes<-getBM(attributes=c('hgnc_symbol', 'NCBI gene ID'),
filters = 'hgnc_symbol',
values = "ACTB",
mart = ensembl_hs)
Genes<-getBM(attributes=c('hgnc_symbol', 'entrezgene'),
filters = 'hgnc_symbol',
values = "ACTB",
mart = ensembl_hs)
View(Genes)
Genes<-getBM(attributes=c('hgnc_symbol', 'entrezgene'),
filters = 'hgnc_symbol',
values = Housekeeping_TranscriptFiltered$`Gene symbol`,
mart = ensembl_hs)
View(Genes)
length(unique(Housekeeping_TranscriptFiltered$`Gene symbol`))
length(unique(Genes$hgnc_symbol))
runApp('Desktop/Ubuntu/RefTranscriptDb/HK Transcript')
runApp('Desktop/Ubuntu/RefTranscriptDb/HK Transcript')
runApp('Desktop/Ubuntu/RefTranscriptDb/HK Transcript')
runApp('Desktop/Ubuntu/RefTranscriptDb/HK Transcript')
runApp('Desktop/Ubuntu/RefTranscriptDb/HK Transcript')
runApp('Desktop/Ubuntu/RefTranscriptDb/HK Transcript')
shiny::runApp('Desktop/Ubuntu/RefTranscriptDb/HK Transcript')
shiny::runApp('Desktop/Ubuntu/RefTranscriptDb/HK Transcript')
shiny::runApp('Desktop/Ubuntu/RefTranscriptDb/HK Transcript')
shiny::runApp('Desktop/Ubuntu/RefTranscriptDb/HK Transcript')
shiny::runApp('Desktop/Ubuntu/RefTranscriptDb/HK Transcript')
shiny::runApp('Desktop/Ubuntu/RefTranscriptDb/HK Transcript')
shiny::runApp('Desktop/Ubuntu/RefTranscriptDb/HK Transcript')
shiny::runApp('Desktop/Ubuntu/RefTranscriptDb/HK Transcript')
shiny::runApp('Desktop/Ubuntu/RefTranscriptDb/HK Transcript')
shiny::runApp('Desktop/Ubuntu/RefTranscriptDb/HK Transcript')
shiny::runApp('Desktop/Ubuntu/RefTranscriptDb/HK Transcript')
shiny::runApp('Desktop/Ubuntu/RefTranscriptDb/HK Transcript')
shiny::runApp('Desktop/Ubuntu/RefTranscriptDb/HK Transcript')
shiny::runApp('Desktop/Ubuntu/RefTranscriptDb/HK Transcript')
shiny::runApp('Desktop/Ubuntu/RefTranscriptDb/HK Transcript')
shiny::runApp('Desktop/Ubuntu/RefTranscriptDb/HK Transcript')
shiny::runApp('Desktop/Ubuntu/RefTranscriptDb/HK Transcript')
shiny::runApp('Desktop/Ubuntu/RefTranscriptDb/HK Transcript')
shiny::runApp('Desktop/Ubuntu/RefTranscriptDb/HK Transcript')
shiny::runApp('Desktop/Ubuntu/RefTranscriptDb/HK Transcript')
paste0("abc",div(HTML('<a id="inf">RPKM</a>')))
shiny::runApp('Desktop/Ubuntu/RefTranscriptDb/HK Transcript')
paste0("abc",div(HTML('<a id='"'inf'"'>RPKM</a>')))
paste0("abc","div(HTML('<a id="","inf">RPKM</a>'))")
paste0("abc",div(HTML('<a id="inf">RPKM</a>')))
paste0("abc", "<div><a id="inf">RPKM</a></div>")
paste0("abc", "<div><a id='inf'>RPKM</a></div>")
shiny::runApp('Desktop/Ubuntu/RefTranscriptDb/HK Transcript')
shiny::runApp('Desktop/Ubuntu/RefTranscriptDb/HK Transcript')
shiny::runApp('Desktop/Ubuntu/RefTranscriptDb/HK Transcript')
shiny::runApp('Desktop/Ubuntu/RefTranscriptDb/HK Transcript')
shiny::runApp('Desktop/Ubuntu/RefTranscriptDb/HK Transcript')
paste0("abc", "<a href='"'www.''google.com'"' id='inf'>RPKM</a>")
paste0("abc", "<a href='www.google.com' id='inf'>RPKM</a>")
shiny::runApp('Desktop/Ubuntu/RefTranscriptDb/HK Transcript')
shiny::runApp('Desktop/Ubuntu/RefTranscriptDb/HK Transcript')
paste0("abc", "<a href='www.google.com' 'target="_blank"'>RPKM</a>")
paste0("abc", "<a href='www.google.com'", " ", "'target="_blank"'>RPKM</a>")
paste0('<a href=https://www.genecards.org/cgi-bin/carddisp.pl?gene=',hk$'Gene symbol', ' ' , 'target="_blank"')
paste0('<a href=https://www.genecards.org/cgi-bin/carddisp.pl?gene=', ' ' , 'target="_blank"')
paste0("abc", "<div><a id='inf'>RPKM</a></div>")
paste0("abc", "<a href='www.google.com'", " ", "'target='_blank''>RPKM</a>")
paste0("abc", "<a href='www.google.com'", " ", "target='_blank'>RPKM</a>")
shiny::runApp('Desktop/Ubuntu/RefTranscriptDb/HK Transcript')
shiny::runApp('Desktop/Ubuntu/RefTranscriptDb/HK Transcript')
shiny::runApp('Desktop/Ubuntu/RefTranscriptDb/HK Transcript')
shiny::runApp('Desktop/Ubuntu/RefTranscriptDb/HK Transcript')
shiny::runApp('Desktop/Ubuntu/RefTranscriptDb/HK Transcript')
shiny::runApp('Desktop/Ubuntu/RefTranscriptDb/HK Transcript')
shiny::runApp('Desktop/Ubuntu/RefTranscriptDb/HK Transcript')
shiny::runApp('Desktop/Ubuntu/RefTranscriptDb/HK Transcript')
shiny::runApp('Desktop/Ubuntu/RefTranscriptDb/HK Transcript')
shiny::runApp('Desktop/Ubuntu/RefTranscriptDb/HK Transcript')
shiny::runApp('Desktop/Ubuntu/RefTranscriptDb/HK Transcript')
shiny::runApp('Desktop/Ubuntu/RefTranscriptDb/HK Transcript')
shiny::runApp('Desktop/Ubuntu/RefTranscriptDb/HK Transcript')
sort(tab_echant$Type)
as.character(sort(tab_echant$Type))
as.character(sort.int(tab_echant$Type))
sort(c("ga", "fs", "as"))
tab_echant$Type
unlist(tab_echant$Type)
as.character(tab_echant$Type)
sort(as.character(tab_echant$Type))
as.character(tab_echant$Type)
shiny::runApp('Desktop/Ubuntu/RefTranscriptDb/HK Transcript')
shiny::runApp('Desktop/Ubuntu/RefTranscriptDb/HK Transcript')
shiny::runApp('Desktop/Ubuntu/RefTranscriptDb/HK Transcript')
shiny::runApp('Desktop/Ubuntu/RefTranscriptDb/HK Transcript')
shiny::runApp('Desktop/Ubuntu/RefTranscriptDb/HK Transcript')
version
shiny::runApp('Desktop/Ubuntu/RefTranscriptDb/HK Transcript_sqlite/Housekeepingapp')
shiny::runApp('Desktop/Ubuntu/RefTranscriptDb/HK Transcript_sqlite/Housekeepingapp')
shiny::runApp('Desktop/Ubuntu/RefTranscriptDb/HK Transcript_sqlite/Housekeepingapp')
load("/home/bidossessi/Desktop/Ubuntu/RefTranscriptDb/Housekeeping_genes_Repository/Code_data_HK_Gtex/Results/Housekeeping/Adipose_Subcutaneous_expr_Housekeeping.RData")
View(Adipose_Subcutaneous_expr_Housekeeping)
shiny::runApp('Desktop/Ubuntu/RefTranscriptDb/HK Transcript_sqlite/Housekeepingapp')
shiny::runApp('Desktop/Ubuntu/RefTranscriptDb/HK Transcript_sqlite/Housekeepingapp')
shiny::runApp('Desktop/Ubuntu/RefTranscriptDb/HK Transcript_sqlite/Housekeepingapp')
shiny::runApp('Desktop/Ubuntu/RefTranscriptDb/HK Transcript_sqlite/Housekeepingapp')
shiny::runApp('Desktop/Ubuntu/RefTranscriptDb/HK Transcript_sqlite/Housekeepingapp')
shiny::runApp('Desktop/Ubuntu/RefTranscriptDb/HK Transcript_sqlite/Housekeepingapp')
shiny::runApp('Desktop/Ubuntu/RefTranscriptDb/HK Transcript_sqlite/Housekeepingapp')
shiny::runApp('Desktop/Ubuntu/RefTranscriptDb/HK Transcript_sqlite/Housekeepingapp')
shiny::runApp('Desktop/Ubuntu/RefTranscriptDb/HK Transcript_sqlite/Housekeepingapp')
shiny::runApp('Desktop/Ubuntu/RefTranscriptDb/HK Transcript_sqlite/Housekeepingapp')
shiny::runApp('Desktop/Ubuntu/RefTranscriptDb/HK Transcript_sqlite/Housekeepingapp')
shiny::runApp('Desktop/Ubuntu/RefTranscriptDb/HK Transcript_sqlite/Housekeepingapp')
shiny::runApp('Desktop/Ubuntu/RefTranscriptDb/HK Transcript_sqlite/Housekeepingapp')
shiny::runApp('Desktop/Ubuntu/RefTranscriptDb/HK Transcript_sqlite/Housekeepingapp')
shiny::runApp('Desktop/Ubuntu/RefTranscriptDb/HK Transcript_sqlite/Housekeepingapp')
shiny::runApp('Desktop/Ubuntu/RefTranscriptDb/HK Transcript_sqlite/Housekeepingapp')
shiny::runApp('Desktop/Ubuntu/RefTranscriptDb/HK Transcript_sqlite/Housekeepingapp')
shiny::runApp('Desktop/Ubuntu/RefTranscriptDb/HK Transcript_sqlite/Housekeepingapp')
shiny::runApp('Desktop/Ubuntu/RefTranscriptDb/HK Transcript_sqlite/Housekeepingapp')
shiny::runApp('Desktop/Ubuntu/RefTranscriptDb/HK Transcript_sqlite/Housekeepingapp')
shiny::runApp('Desktop/Ubuntu/RefTranscriptDb/HK Transcript_sqlite/Housekeepingapp')
shiny::runApp('Desktop/Ubuntu/RefTranscriptDb/HK Transcript_sqlite/Housekeepingapp')
shiny::runApp('Desktop/Ubuntu/RefTranscriptDb/HK Transcript_sqlite/Housekeepingapp')
shiny::runApp('Desktop/Ubuntu/RefTranscriptDb/HK Transcript_sqlite/Housekeepingapp')
shiny::runApp('Desktop/Ubuntu/RefTranscriptDb/HK Transcript_sqlite/Housekeepingapp')
shiny::runApp('Desktop/Ubuntu/RefTranscriptDb/HK Transcript_sqlite/Housekeepingapp')
shiny::runApp('Desktop/Ubuntu/RefTranscriptDb/HK Transcript_sqlite/Housekeepingapp')
shiny::runApp('Desktop/Ubuntu/RefTranscriptDb/HK Transcript_sqlite/Housekeepingapp')
shiny::runApp('Desktop/Ubuntu/RefTranscriptDb/HK Transcript_sqlite/Housekeepingapp')
shiny::runApp('Desktop/Ubuntu/RefTranscriptDb/HK Transcript_sqlite/Housekeepingapp')
shiny::runApp('Desktop/Ubuntu/RefTranscriptDb/HK Transcript_sqlite/Housekeepingapp')
shiny::runApp('Desktop/Ubuntu/RefTranscriptDb/HK Transcript_sqlite/Housekeepingapp')
shiny::runApp('Desktop/Ubuntu/RefTranscriptDb/HK Transcript_sqlite/Housekeepingapp')
shiny::runApp('Desktop/Ubuntu/RefTranscriptDb/HK Transcript_sqlite/Housekeepingapp')
shiny::runApp('Desktop/Ubuntu/RefTranscriptDb/HK Transcript_sqlite/Housekeepingapp')
shiny::runApp('Desktop/Ubuntu/RefTranscriptDb/HK Transcript_sqlite/Housekeepingapp')
shiny::runApp('Desktop/Ubuntu/RefTranscriptDb/HK Transcript_sqlite/Housekeepingapp')
shiny::runApp('Desktop/Ubuntu/RefTranscriptDb/HK Transcript_sqlite/Housekeepingapp')
shiny::runApp('Desktop/Ubuntu/RefTranscriptDb/HK Transcript_sqlite/Housekeepingapp')
shiny::runApp('Desktop/Ubuntu/RefTranscriptDb/HK Transcript_sqlite/Housekeepingapp')
shiny::runApp('Desktop/Ubuntu/RefTranscriptDb/HK Transcript_sqlite/Housekeepingapp')
shiny::runApp('Desktop/Ubuntu/RefTranscriptDb/HK Transcript_sqlite/Housekeepingapp')
shiny::runApp('Desktop/Ubuntu/RefTranscriptDb/HK Transcript_sqlite/Housekeepingapp')
shiny::runApp('Desktop/Ubuntu/RefTranscriptDb/HK Transcript_sqlite/Housekeepingapp')
shiny::runApp('Desktop/Ubuntu/RefTranscriptDb/HK Transcript_sqlite/Housekeepingapp')
shiny::runApp('Desktop/Ubuntu/RefTranscriptDb/HK Transcript_sqlite/Housekeepingapp')
shiny::runApp('Desktop/Ubuntu/RefTranscriptDb/HK Transcript_sqlite/Housekeepingapp')
shiny::runApp('Desktop/Ubuntu/RefTranscriptDb/HK Transcript_sqlite/Housekeepingapp')
shiny::runApp('Desktop/Ubuntu/RefTranscriptDb/HK Transcript_sqlite/Housekeepingapp')
plot_ly(MostStableRPKM, y = ~ENST00000290541, x = ~Tissue, type = "box", color = ~Tissue, hoverinfo = "none") %>%
layout(title = paste("Expression level (RPKM) of", "ENST00000290541")) %>%
layout(showlegend = FALSE, xaxis=x, yaxis=y)
load("External/Data/MostStableRPKM.RData")
shiny::runApp('Desktop/Ubuntu/RefTranscriptDb/HK Transcript_sqlite/Housekeepingapp')
shiny::runApp('Desktop/Ubuntu/RefTranscriptDb/HK Transcript_sqlite/Housekeepingapp')
shiny::runApp('Desktop/Ubuntu/RefTranscriptDb/HK Transcript_sqlite/Housekeepingapp')
setwd("~/repository/housekeepingAtlas/External/Table_Harmonizome")
setwd("~/repository/housekeepingAtlas/External/Harmonizome")
load("~/repository/housekeepingAtlas/External/Harmonizome/session.RData")
for (i in 1805:2162) {
tab<-as.character(uniqueGene[i])
#load(paste0(tab, ".RData"))
url=paste0('https://amp.pharm.mssm.edu/Harmonizome/api/1.0/download/associations?gene=', tab)
if(class(try(fread(url)))=="try-error") {
failed2=c(failed2,tab)
} else {
assign(tab, fread(url))
data = eval(parse(text = tab))
if(nrow(data)>0) {
data <- unique(na.omit(merge(data.frame(dataset=interest), data, by="dataset", all.x = T)))
save(data, file = paste0(tab, "interest.RData"))
} else {
failed2=c(failed2,tab)
save(failed2, file = "failed2.RData")
}
}
rm(list=tab)
cat(rep(c("=", ">"),c(6,1)), i, "of", length(uniqueGene))
}
i=1805
tab<-as.character(uniqueGene[i])
#load(paste0(tab, ".RData"))
url=paste0('https://amp.pharm.mssm.edu/Harmonizome/api/1.0/download/associations?gene=', tab)
if(class(try(fread(url)))=="try-error") {
failed2=c(failed2,tab)
} else {
assign(tab, fread(url))
data = eval(parse(text = tab))
if(nrow(data)>0) {
data <- unique(na.omit(merge(data.frame(dataset=interest), data, by="dataset", all.x = T)))
save(data, file = paste0(tab, "interest.RData"))
} else {
failed2=c(failed2,tab)
save(failed2, file = "failed2.RData")
}
}
library(data.table)
for (i in 1805:2162) {
tab<-as.character(uniqueGene[i])
#load(paste0(tab, ".RData"))
url=paste0('https://amp.pharm.mssm.edu/Harmonizome/api/1.0/download/associations?gene=', tab)
if(class(try(fread(url)))=="try-error") {
failed2=c(failed2,tab)
} else {
assign(tab, fread(url))
data = eval(parse(text = tab))
if(nrow(data)>0) {
data <- unique(na.omit(merge(data.frame(dataset=interest), data, by="dataset", all.x = T)))
save(data, file = paste0(tab, "interest.RData"))
} else {
failed2=c(failed2,tab)
save(failed2, file = "failed2.RData")
}
}
rm(list=tab)
cat(rep(c("=", ">"),c(6,1)), i, "of", length(uniqueGene))
}
1938+406
#load(paste0(tab, ".RData"))
url=paste0('https://amp.pharm.mssm.edu/Harmonizome/api/1.0/download/associations?gene=', tab)
class(try(fread(url)))=="try-error"
assign(tab, fread(url))
data = eval(parse(text = tab))
tab
data = eval(parse(text = "HLA-B"))
data = eval(parse(text = "HLA'-'B"))
data = `HLA-B`
if(nrow(data)>0) {
data <- unique(na.omit(merge(data.frame(dataset=interest), data, by="dataset", all.x = T)))
save(data, file = paste0(tab, "interest.RData"))
} else {
failed2=c(failed2,tab)
save(failed2, file = "failed2.RData")
}
for (i in 1939:2162) {
tab<-as.character(uniqueGene[i])
#load(paste0(tab, ".RData"))
url=paste0('https://amp.pharm.mssm.edu/Harmonizome/api/1.0/download/associations?gene=', tab)
if(class(try(fread(url)))=="try-error") {
failed2=c(failed2,tab)
} else {
assign(tab, fread(url))
data = eval(parse(text = tab))
if(nrow(data)>0) {
data <- unique(na.omit(merge(data.frame(dataset=interest), data, by="dataset", all.x = T)))
save(data, file = paste0(tab, "interest.RData"))
} else {
failed2=c(failed2,tab)
save(failed2, file = "failed2.RData")
}
}
rm(list=tab)
cat(rep(c("=", ">"),c(6,1)), i, "of", length(uniqueGene))
}
data=`ERVK3-1`
if(nrow(data)>0) {
data <- unique(na.omit(merge(data.frame(dataset=interest), data, by="dataset", all.x = T)))
save(data, file = paste0(tab, "interest.RData"))
} else {
failed2=c(failed2,tab)
save(failed2, file = "failed2.RData")
}
rm(list=tab)
for (i in 1941:2162) {
tab<-as.character(uniqueGene[i])
#load(paste0(tab, ".RData"))
url=paste0('https://amp.pharm.mssm.edu/Harmonizome/api/1.0/download/associations?gene=', tab)
if(class(try(fread(url)))=="try-error") {
failed2=c(failed2,tab)
} else {
assign(tab, fread(url))
data = eval(parse(text = tab))
if(nrow(data)>0) {
data <- unique(na.omit(merge(data.frame(dataset=interest), data, by="dataset", all.x = T)))
save(data, file = paste0(tab, "interest.RData"))
} else {
failed2=c(failed2,tab)
save(failed2, file = "failed2.RData")
}
}
rm(list=tab)
cat(rep(c("=", ">"),c(6,1)), i, "of", length(uniqueGene))
}
for (i in 1942:2162) {
tab<-as.character(uniqueGene[i])
#load(paste0(tab, ".RData"))
url=paste0('https://amp.pharm.mssm.edu/Harmonizome/api/1.0/download/associations?gene=', tab)
if(class(try(fread(url)))=="try-error") {
failed2=c(failed2,tab)
} else {
assign(tab, fread(url))
data = eval(parse(text = tab))
if(nrow(data)>0) {
data <- unique(na.omit(merge(data.frame(dataset=interest), data, by="dataset", all.x = T)))
save(data, file = paste0(tab, "interest.RData"))
} else {
failed2=c(failed2,tab)
save(failed2, file = "failed2.RData")
}
}
rm(list=tab)
cat(rep(c("=", ">"),c(6,1)), i, "of", length(uniqueGene))
}
data=`NCBP2-AS2`
if(nrow(data)>0) {
data <- unique(na.omit(merge(data.frame(dataset=interest), data, by="dataset", all.x = T)))
save(data, file = paste0(tab, "interest.RData"))
} else {
failed2=c(failed2,tab)
save(failed2, file = "failed2.RData")
}
rm(list=tab)
for (i in 2160:2162) {
tab<-as.character(uniqueGene[i])
#load(paste0(tab, ".RData"))
url=paste0('https://amp.pharm.mssm.edu/Harmonizome/api/1.0/download/associations?gene=', tab)
if(class(try(fread(url)))=="try-error") {
failed2=c(failed2,tab)
} else {
assign(tab, fread(url))
data = eval(parse(text = tab))
if(nrow(data)>0) {
data <- unique(na.omit(merge(data.frame(dataset=interest), data, by="dataset", all.x = T)))
save(data, file = paste0(tab, "interest.RData"))
} else {
failed2=c(failed2,tab)
save(failed2, file = "failed2.RData")
}
}
rm(list=tab)
cat(rep(c("=", ">"),c(6,1)), i, "of", length(uniqueGene))
}
failed3=success=c()
i=1
tab <- unique(failed2[i])
if(class(try(load(paste0(tab, "interest.RData"))))=="try-error") {
failed3=c(failed3,tab)
} else {
success<-c(success,tab)
}
class(try(load(paste0(tab, "interest.RData"))))
for (i in 2:length(failed2)) {
tab <- unique(failed2[i])
if(class(try(load(paste0(tab, "interest.RData"))))=="try-error") {
failed3=c(failed3,tab)
} else {
success<-c(success,tab)
}
}
failed3 <- unique(failed3)
failed2=c()
i=1
tab<-as.character(failed3[i])
#load(paste0(tab, ".RData"))
url=paste0('https://amp.pharm.mssm.edu/Harmonizome/api/1.0/download/associations?gene=', tab)
if(class(try(fread(url)))=="try-error") {
failed2=c(failed2,tab)
} else {
assign(tab, fread(url))
data = eval(parse(text = tab))
if(nrow(data)>0) {
data <- unique(na.omit(merge(data.frame(dataset=interest), data, by="dataset", all.x = T)))
save(data, file = paste0(tab, "interest.RData"))
} else {
failed2=c(failed2,tab)
save(failed2, file = "failed2.RData")
}
}
tab
fread(url)
assign(tab, fread(url))
